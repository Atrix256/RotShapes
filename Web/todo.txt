
* seems like theres black dots and gaps getting into the data somehow. need to figure that out.

 * make texture repeat work with bilinear sampling -> for wrap around!

 * load image support -> erase all pixels

* base image applied before the clicks
 * this makes it so image loading works, as well as undo

* double check that we aren't ever reading out of bounds.  like esp in the results reading of the encoded image
 * could make a helper function to sample pixels from image data, and pass it a flag to bilinear sample or not.
 * could try bilinear sampling source image... but then again maybe not since it should be just black/white!

* organize code better and clean it up

* bug: the anti aliasing (smoothstep) is what causes the hole in the middle, fix! (maybe symptom of bug below)

* bug: fill in the middle, set to 512x512 results and 1024 encoded. problems!

* test in IE, Firefox, and on mac


* there are definitely some non black & white pixels in the source data when reading it.  that might be causing problems with the encoding.
 * could try saving image and forcing it to white/black and re-loading it, and seeing difference

=====
Later...
* a playground to investigate the properties of the image (scale, zoom, tint, anti aliasing, etc)
 * in webgl?
 * w/ animation
 * stroke and drop shadow

* make a different page tool to combine multiple single frame images into a multi frame image
 * multiple encoded frames in one image (for sprite sheets and animation)
 * be able to animate the preview (result) for multi frame images
  * maybe only bilinear filter on x axis

* a performance test playground vs a regular texture

* share pixel shader code to decode rot images from UV coordinates

* show shader code to decode rot images, based on options selected!

* a playground that lets you layer multiple tinted (and animated?) layers?

* see how this holds up to dxt compression (maybe jpg too?)

* sample library & research
 * text
 * asian text
 * google icons
 * animated icons
 * get pixel artists involved

* benchmark vs other methods (regular textures & distance textures)

* animate / distort shape by putting distance (source? encoded?) through functions over time. also texture offset animated over time for rotation effects!

* rename distsq to something more generic since it might be squared or not

* Display C code for encoded image data (and writing it to a file??)

* add a checkbox to show the origin on the result image?

=====RESEARCH=====

* source/result image 256,256. changing encoded size matters, but keeps the same shape.  result to 512,512 and suddenly all sorts of artifacts start coming out! (bilinear sampling off)
 * maybe just a bug? or some inherant issue that needs looking at!
 * probably due to encoding.  we don't fill in multiple buckets when encoding, so there is probably uninitialized information in those buckets.

* when result image is extra small there will be problems from not enough info taken from encoded data.  Need to use mips i think.

* use shape as alpha texture for texture for decaling

* do texture offset to rotate image

=====NOTES=====

* why does bilinear texture sampling have such problems with artifacts?
 * has to do with the fact that things next to eachother in space may be encoded in different color channels, so the interpolation sucks
 * also, making the "empty pixel" values better helped this

=====NAME=====

* polar something or rather?

* dual annulus polar shape encoding!

=====REFERENCES=====
 * valve distance textures

 * valve distance texture references!

=====FUTURE WORK=====

* some kind of blur pass to smooth data (but might lose details from source image!)

* find out how to make bilinear filtering work better.  "empty" angles next to non empty.  it will blend and make things go to 0 or 255 ):

* other ways of converting images to the encoded image
   * like, instead of casting a ray, could do a cone and average distances found or something.
   * could use bressenham's algorithm if just casting a ray.
   * probably lots of diff ways

* look at being able to do AA in "squared distance space" somehow?
 * only matters if encoding in squared distance

* could decrease # of color channels if you don't need all this info.
 * 2 color channels = out, in, out (1 spiral)
 * 1 color channel = in (could describe a convex shape)

* heuristic for which features to keep (middle, thickest, inside, outside, etc)

* maybe horizontal AA can be achieved (or helped) when creating the radial image, to reduce horizontal aliasing?

* instead of RGBA having 4 distances with 256 distances for each channel, could have RG,BA represent 2 distances with 65536 distances each.
 * or 1 uint32 distance for convex shapes

* bilinear filtering has problems because even when white pixels are next to eachother, they may be encoded in different channels!!
 * various situations, seem fixable with specific changes, maybe more to think about here.
 * can we stabalize it somehow?
 * maybe low pass filter changes somehow so big changes in the filter lookup are ignored?

=====NOTES=====

* squared distance makes for worse images in the end in my testing (verify w/ smoother art?)
 * could show this in action somehow.

? what should happen if result isn't square but source is.  Should it stretch?
 ! this is controlled by however the UV coordinates are set up.

? fill tool in encoder?
 ! there is no flood fill in javascript/html5 so would need to code it by hand.  image important should be good enough.

? we dont use the full range of the float (0-1) for each color channel, maybe we can improve that
 * not all colors are meaningful, that means we aren't using the full data space available
 * more complex shape decoding likely waranted for more accuracy.  video cards have more processing power, and are more often limited by memory access.
